"""All tables here

Revision ID: a91aa25dd787
Revises: 1c6e65dbf007
Create Date: 2025-05-18 16:53:40.648074

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from trucost.core.models.user import UserRole  # noqa: F401


# revision identifiers, used by Alembic.
revision: str = "a91aa25dd787"
down_revision: Union[str, None] = "1c6e65dbf007"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


# Create a SQLAlchemy Enum using PostgreSQL dialect
user_role_enum = postgresql.ENUM(UserRole, name="userrole")


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "athena_queries",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("query", sa.String(), nullable=True),
        sa.Column("category", sa.String(), nullable=True),
        sa.Column("category_type", sa.String(), nullable=True),
        sa.Column("query_type", sa.String(), nullable=True),
        sa.Column("query_subtype", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("query_hash", sa.String(), nullable=False),
        sa.Column("query_metadata", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "category",
            "category_type",
            "query_type",
            "query_subtype",
            name="uq_athena_query_combination",
        ),
        sa.UniqueConstraint("query_hash"),
    )
    op.create_index(
        op.f("ix_athena_queries_id"), "athena_queries", ["id"], unique=False
    )
    op.create_table(
        "templates",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("created_by", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_settings",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("access_key", sa.String(), nullable=False),
        sa.Column("secret_key", sa.String(), nullable=False),
        sa.Column("region", sa.String(), nullable=False),
        sa.Column("session_token", sa.String(), nullable=True),
        sa.Column("athena_database", sa.String(), nullable=False),
        sa.Column("athena_table", sa.String(), nullable=False),
        sa.Column("athena_location", sa.String(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(op.f("ix_user_settings_id"), "user_settings", ["id"], unique=False)
    op.create_table(
        "athena_query_executions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("query_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("execution_id", sa.String(), nullable=False),
        sa.Column("batch_id", sa.String(), nullable=True),
        sa.Column(
            "status",
            sa.Enum(
                "PENDING",
                "RUNNING",
                "SUCCEEDED",
                "FAILED",
                "CANCELLED",
                name="queryexecutionstatus",
            ),
            nullable=False,
        ),
        sa.Column("executed_query", sa.String(), nullable=True),
        sa.Column("error_message", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("user_settings_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["query_id"],
            ["athena_queries.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_settings_id"],
            ["user_settings.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("execution_id"),
    )
    op.create_index(
        op.f("ix_athena_query_executions_id"),
        "athena_query_executions",
        ["id"],
        unique=False,
    )
    op.create_table(
        "query_template_assignments",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("template_id", sa.Integer(), nullable=False),
        sa.Column("query_id", sa.Integer(), nullable=False),
        sa.Column("dashboard_config", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ["query_id"],
            ["athena_queries.id"],
        ),
        sa.ForeignKeyConstraint(
            ["template_id"],
            ["templates.id"],
        ),
        sa.PrimaryKeyConstraint("id", "template_id", "query_id"),
    )
    op.create_table(
        "user_template_assignments",
        sa.Column("template_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["template_id"],
            ["templates.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("template_id", "user_id"),
    )

    # Create the enum type first
    user_role_enum.create(op.get_bind())

    op.add_column(
        "users",
        sa.Column(
            "role",
            # sa.Enum("CFO", "CEO", "MANAGER", "ENGINEER", "ADMIN", name="userrole"),
            user_role_enum,
            nullable=False,
        ),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("users", "role")
    op.drop_table("user_template_assignments")
    op.drop_table("query_template_assignments")
    op.drop_index(
        op.f("ix_athena_query_executions_id"), table_name="athena_query_executions"
    )
    op.drop_table("athena_query_executions")
    op.drop_index(op.f("ix_user_settings_id"), table_name="user_settings")
    op.drop_table("user_settings")
    op.drop_table("templates")
    op.drop_index(op.f("ix_athena_queries_id"), table_name="athena_queries")
    op.drop_table("athena_queries")
    # ### end Alembic commands ###
